name: CI

on:
  push:
    branches:
      - master
      - release/**

  pull_request:

jobs:
  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install python dependencies
        run: pip install --upgrade black flake8

      - name: Run Black
        run: black --check tests

      - name: Run Flake8
        run: flake8 tests

      - name: Install rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt, clippy
          override: true

      - name: Chache rust cargo artifacts
        uses: Swatinem/rust-cache@v1
        with:
          key: lints

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run clipppy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --workspace --tests --examples -- -D clippy::all

  check:
    name: Rust Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache rust cargo artifacts
        uses: Swatinem/rust-cache@v1
        with:
          key: check

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --workspace --all-features --locked

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache rust cargo artifacts
        uses: Swatinem/rust-cache@v1
        with:
          key: unit-test

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --all-features --locked

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache rust cargo artifacts
        uses: Swatinem/rust-cache@v1
        with:
          key: integration-test

      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Setup Virtualenv
        run: pip install virtualenv

      - name: Integration tests
        env:
          SENTRY_SYMBOLICATOR_GCS_CLIENT_EMAIL: ${{ secrets.SENTRY_SYMBOLICATOR_GCS_CLIENT_EMAIL }}
          SENTRY_SYMBOLICATOR_GCS_PRIVATE_KEY: ${{ secrets.SENTRY_SYMBOLICATOR_GCS_PRIVATE_KEY }}
          SENTRY_SYMBOLICATOR_TEST_AWS_ACCESS_KEY_ID: ${{ secrets.SENTRY_SYMBOLICATOR_TEST_AWS_ACCESS_KEY_ID }}
          SENTRY_SYMBOLICATOR_TEST_AWS_SECRET_ACCESS_KEY: ${{ secrets.SENTRY_SYMBOLICATOR_TEST_AWS_SECRET_ACCESS_KEY }}
        run: make test-integration CI_ARGS="--ci"


  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Setup Virtualenv
        run: pip install virtualenv

      - name: Build Docs
        run: make docs

  upload-docs:
    name: Upload Docs
    runs-on: ubuntu-latest
    if: "contains(github.ref, 'release/')"
    needs: docs
    steps:

      - uses: actions/setup-node@v1

      - uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/node_modules
            ${{ github.workspace }}/packages/**/node_modules
            ${{ github.workspace }}/packages/**/build
            ${{ github.workspace }}/packages/**/dist
            ${{ github.workspace }}/packages/**/esm
          key: ${{ runner.os }}-${{ github.sha }}

      - name: Install Zeus
        run: |
          yarn global add @zeus-ci/cli
          echo "::add-path::$(yarn global bin)"

      - name: Upload docs
        env:
          ZEUS_API_TOKEN: ${{ secrets.ZEUS_API_TOKEN }}
          ZEUS_HOOK_BASE: ${{ secrets.ZEUS_HOOK_BASE }}
        run: |
          cd site && zip -r gh-pages .
          zeus upload -t "application/zip+docs" site/gh-pages.zip
