on:
  push:
    branches:
      - master
  pull_request:

name: CI

jobs:
  check:
    name: Rust Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache downloads and build
        uses: actions/cache@v2
        with:
          path: |
              /usr/share/rust/.cargo/registry
              /usr/share/rust/.cargo/git
              ./target
          key: check-${{ runner.os }}-rustc-${{ steps.toolchain.outputs.rustc_hash }}-lock-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --workspace --all-features --locked

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache downloads and build
        uses: actions/cache@v2
        with:
          path: |
              /usr/share/rust/.cargo/registry
              /usr/share/rust/.cargo/git
              ./target
          key: unit-tests-${{ runner.os }}-rustc-${{ steps.toolchain.outputs.rustc_hash }}-lock-${{ hashFiles('**/Cargo.lock') }}

      # TODO: Consider using Makefile for this as well.
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --all-features --locked

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Setup Virtualenv
        run: 'python -m pip install virtualenv'

      - name: Cache downloads and build
        uses: actions/cache@v2
        with:
          path: |
              /usr/share/rust/.cargo/registry
              /usr/share/rust/.cargo/git
              ./target
          key: integration-tests-${{ runner.os }}-rustc-${{ steps.toolchain.outputs.rustc_hash }}-lock-${{ hashFiles('**/Cargo.lock') }}

      - name: Integration tests
        run: 'make test-integration'

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache downloads and build
        uses: actions/cache@v2
        with:
          path: |
              /usr/share/rust/.cargo/registry
              /usr/share/rust/.cargo/git
              ./target
          key: lints-${{ runner.os }}-rustc-${{ steps.toolchain.outputs.rustc_hash }}-lock-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --workspace --tests --examples -- -D clippy::all

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Setup Virtualenv
        run: 'python -m pip install virtualenv'

      - name: Python Formatting
        run: 'make format-python'

      - name: Python Lints
        run: 'make lint-python'

  docs:
    name: Docs
    runs-on: ubunut-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Setup Virtualenv
        run: 'python -m pip install virtualenv'

      - name: Build Docs
        run: 'make docs'
