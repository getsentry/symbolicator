name: CI

on:
  pull_request:
  push:
    branches:
      - master
      - release/**

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  RUSTFLAGS: -Dwarnings

jobs:
  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Install libcurl-dev
        run: |
          sudo apt update
          sudo apt-get install -y libcurl4-openssl-dev

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Get changed files
        id: changes
        uses: dorny/paths-filter@0bc4621a3135347011ad047f9ecf449bf72ce2bd # v3.0.0
        with:
          list-files: json
          filters: |
            all:
              - added|modified: '**/*'

      - name: Install rust stable toolchain
        run: rustup toolchain install stable --profile minimal --component rustfmt --component clippy --no-self-update

      - name: Cache rust cargo artifacts
        uses: swatinem/rust-cache@v2

      - uses: astral-sh/setup-uv@884ad927a57e558e7a70b92f2bccf9198a4be546 # v6
        with:
          version: '0.8.2'
          # we just cache the venv-dir directly in action-setup-venv
          enable-cache: false

      - uses: getsentry/action-setup-venv@3a832a9604b3e1a4202ae559248f26867b467cc7 # v2.1.1
        with:
          python-version: 3.11.11
          cache-dependency-path: uv.lock
          install-cmd: uv sync --frozen --only-dev --active

      - uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ~/.cache/pre-commit
          key: cache-epoch-1|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml', 'uv.lock') }}

      - name: Install pre-commit
        run: pre-commit install-hooks

      - name: Run pre-commit
        run: |
          jq '.[]' --raw-output <<< '${{steps.changes.outputs.all_files}}' |
            xargs pre-commit run --files

      - name: Run clippy
        run: cargo clippy --all-features --workspace --tests --examples

  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Install libcurl-dev
        run: |
          sudo apt update
          sudo apt-get install -y libcurl4-openssl-dev

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install rust stable toolchain
        run: rustup toolchain install stable --profile minimal --no-self-update

      - name: Cache rust cargo artifacts
        uses: swatinem/rust-cache@v2

      - name: Run cargo test
        run: cargo test --workspace --all-features --locked
        env:
          SENTRY_SYMBOLICATOR_GCS_CLIENT_EMAIL: ${{ secrets.SENTRY_SYMBOLICATOR_GCS_CLIENT_EMAIL }}
          SENTRY_SYMBOLICATOR_GCS_PRIVATE_KEY: ${{ secrets.SENTRY_SYMBOLICATOR_GCS_PRIVATE_KEY }}
          SENTRY_SYMBOLICATOR_TEST_AWS_ACCESS_KEY_ID: ${{ secrets.SENTRY_SYMBOLICATOR_TEST_AWS_ACCESS_KEY_ID }}
          SENTRY_SYMBOLICATOR_TEST_AWS_SECRET_ACCESS_KEY: ${{ secrets.SENTRY_SYMBOLICATOR_TEST_AWS_SECRET_ACCESS_KEY }}
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}

  test_against_latest_sentry:
    name: Sentry-Symbolicator Tests
    runs-on: ubuntu-latest
    env:
      USE_NEW_DEVSERVICES: 1

    steps:
      - name: Install libcurl-dev
        run: |
          sudo apt update
          sudo apt-get install -y libcurl4-openssl-dev

      - name: Checkout Symbolicator
        uses: actions/checkout@v4

      # Checkout Sentry and run integration tests against latest Symbolicator
      - name: Checkout sentry
        uses: actions/checkout@v4
        with:
          repository: getsentry/sentry
          path: sentry

      - name: Setup steps
        id: setup
        run: |
          # We cannot execute actions that are not placed under .github of the main repo
          mkdir -p .github/actions/
          cp -r sentry/.github/actions/setup-sentry .github/actions/

      - name: Setup Sentry
        uses: ./.github/actions/setup-sentry
        with:
          workdir: sentry
          mode: minimal

      - name: Do the localhost docker dance
        run: echo "$DJANGO_LIVE_TEST_SERVER_ADDRESS host.docker.internal" | sudo tee --append /etc/hosts

      - name: Install rust stable toolchain
        run: rustup toolchain install stable --profile minimal --no-self-update

      - name: Cache rust cargo artifacts
        uses: swatinem/rust-cache@v2

      - name: Build Symbolicator
        run: cargo build --locked

      - name: Run Symbolicator
        run: ./target/debug/symbolicator run &

      - name: Run Sentry's Symbolicator integration tests
        working-directory: sentry
        run: make test-symbolicator

  doc-comments:
    name: Rust doc comments
    runs-on: ubuntu-latest
    env:
      RUSTDOCFLAGS: -Dwarnings
    steps:
      - name: Install libcurl-dev
        run: |
          sudo apt update
          sudo apt-get install -y libcurl4-openssl-dev

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install rust stable toolchain
        run: rustup toolchain install stable --profile minimal --component rust-docs --no-self-update

      - name: Cache rust cargo artifacts
        uses: swatinem/rust-cache@v2

      - run: cargo doc --workspace --all-features --document-private-items --no-deps

  docs:
    name: Build docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@884ad927a57e558e7a70b92f2bccf9198a4be546 # v6
        with:
          version: '0.8.2'
          # we just cache the venv-dir directly in action-setup-venv
          enable-cache: false

      - uses: getsentry/action-setup-venv@3a832a9604b3e1a4202ae559248f26867b467cc7 # v2.1.1
        with:
          python-version: 3.11.11
          cache-dependency-path: uv.lock
          install-cmd: uv sync --frozen --only-dev --active

      - name: Build Docs
        run: mkdocs build

  codecov:
    name: Code Coverage
    runs-on: ubuntu-latest
    continue-on-error: true # well, its nightly and highly experimental

    steps:
      - name: Install libcurl-dev
        run: |
          sudo apt update
          sudo apt-get install -y libcurl4-openssl-dev

      - uses: actions/checkout@v4

      - name: Install rust stable toolchain
        run: rustup toolchain install stable --profile minimal --component llvm-tools-preview --no-self-update

      - uses: Swatinem/rust-cache@v2

      - uses: taiki-e/install-action@cargo-llvm-cov

      - run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        env:
          SENTRY_SYMBOLICATOR_GCS_CLIENT_EMAIL: ${{ secrets.SENTRY_SYMBOLICATOR_GCS_CLIENT_EMAIL }}
          SENTRY_SYMBOLICATOR_GCS_PRIVATE_KEY: ${{ secrets.SENTRY_SYMBOLICATOR_GCS_PRIVATE_KEY }}
          SENTRY_SYMBOLICATOR_TEST_AWS_ACCESS_KEY_ID: ${{ secrets.SENTRY_SYMBOLICATOR_TEST_AWS_ACCESS_KEY_ID }}
          SENTRY_SYMBOLICATOR_TEST_AWS_SECRET_ACCESS_KEY: ${{ secrets.SENTRY_SYMBOLICATOR_TEST_AWS_SECRET_ACCESS_KEY }}
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}

      - uses: codecov/codecov-action@v5
        with:
          files: lcov.info
