on:
  push:
    branches:
      - master
  pull_request:

name: Rust

jobs:
  build:
    name: Install Rust and build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache Rust registry and build
        uses: actions/cache@v2
        with:
          path: |
              /usr/share/rust/.cargo/registry
              ./target
          key: rust-${{ runner.os }}-rustc-${{ steps.toolchain.outputs.rustc_hash }}-lock-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --workspace --all-features --locked

      - name: Cache Cargo
        uses: actions/upload-artifact@v2
        with:
          name: cargo-cache
          path: /usr/share/rust/.cargo

      - name: Cache Rust build
        uses: actions/upload-artifact@v2
        with:
          name: rust-cache
          path: ./target

  test:
    name: Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Restore Cargo cache
        uses: actions/download-artifact@v2
        with:
          name: cargo-cache
          path: ~/

      - name: Restore Rust build cache
        uses: actions/download-artifact@v2
        with:
          name: rust-cache

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --all-features --locked

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --all --tests --examples -- -D clippy::all
