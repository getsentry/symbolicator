[workspace]
resolver = "2"
members = ["crates/*"]
default-members = ["crates/symbolicator"]

[profile.dev]
# Debug information slows down the build and increases caches in the
# target folder, but we don't require stack traces in most cases.
debug = false

[profile.release]
# In release, however, we do want full debug information to report
# panic and error stack traces to Sentry.
debug = 1

[profile.local]
# For running a local symbolicator, we want the best of both worlds: a fast executable, with quick
# iteration times.
# You can compile/run this with: `cargo run --profile local -- --config local.yml run`
inherits = "release"
debug = false
incremental = true
codegen-units = 256

[patch.crates-io]
# This patch adds an `ip_filter` able to filter out internal IP addresses in DNS resolution
reqwest = { git = "https://github.com/getsentry/reqwest", branch = "restricted-connector" }

# This patch adds limited "templated lambdas" demangling support
cpp_demangle = { git = "https://github.com/getsentry/cpp_demangle", branch = "sentry-patches" }


# For local development: uncomment the following three lines (and adjust the path if necessary)
# to use a local symbolic checkout everywhere.
# This only works for the very specific crate listed here, and not for its dependency tree.
# Alternatively, the whole dependency tree can be changed at once by putting this line into
# `crates/symbolicator/Cargo.toml`:
# symbolic = { path = "../../../symbolic/symbolic", features = ["common-serde", "debuginfo", "demangle", "minidump-serde", "symcache"] }
# See also https://doc.rust-lang.org/cargo/reference/overriding-dependencies.html
# [patch.crates-io]
# symbolic = { path = "../symbolic/symbolic" }
# symbolic-minidump = { path = "../symbolic/symbolic-minidump" }
